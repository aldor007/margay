// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct LogEntry {
    // message fields
    pub index: u64,
    pub term: u64,
    pub field_type: LogEntryType,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LogEntry {
    pub fn new() -> LogEntry {
        ::std::default::Default::default()
    }

    // uint64 index = 1;

    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    pub fn get_index(&self) -> u64 {
        self.index
    }

    // uint64 term = 2;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // .LogEntryType type = 3;

    pub fn clear_field_type(&mut self) {
        self.field_type = LogEntryType::LOG_ENTRY_COMMAND;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: LogEntryType) {
        self.field_type = v;
    }

    pub fn get_field_type(&self) -> LogEntryType {
        self.field_type
    }

    // bytes data = 4;

    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
}

impl ::protobuf::Message for LogEntry {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(2, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != LogEntryType::LOG_ENTRY_COMMAND {
            my_size += ::protobuf::rt::enum_size(3, self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        if self.term != 0 {
            os.write_uint64(2, self.term)?;
        }
        if self.field_type != LogEntryType::LOG_ENTRY_COMMAND {
            os.write_enum(3, self.field_type.value())?;
        }
        if !self.data.is_empty() {
            os.write_bytes(4, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogEntry {
        LogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "index",
                    |m: &LogEntry| { &m.index },
                    |m: &mut LogEntry| { &mut m.index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &LogEntry| { &m.term },
                    |m: &mut LogEntry| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LogEntryType>>(
                    "type",
                    |m: &LogEntry| { &m.field_type },
                    |m: &mut LogEntry| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &LogEntry| { &m.data },
                    |m: &mut LogEntry| { &mut m.data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LogEntry>(
                    "LogEntry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LogEntry {
        static mut instance: ::protobuf::lazy::Lazy<LogEntry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LogEntry,
        };
        unsafe {
            instance.get(LogEntry::new)
        }
    }
}

impl ::protobuf::Clear for LogEntry {
    fn clear(&mut self) {
        self.clear_index();
        self.clear_term();
        self.clear_field_type();
        self.clear_data();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PeerNameContainer {
    // message fields
    pub peer_name: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl PeerNameContainer {
    pub fn new() -> PeerNameContainer {
        ::std::default::Default::default()
    }

    // string peer_name = 1;

    pub fn clear_peer_name(&mut self) {
        self.peer_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_name(&mut self, v: ::std::string::String) {
        self.peer_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_name(&mut self) -> &mut ::std::string::String {
        &mut self.peer_name
    }

    // Take field
    pub fn take_peer_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.peer_name, ::std::string::String::new())
    }

    pub fn get_peer_name(&self) -> &str {
        &self.peer_name
    }
}

impl ::protobuf::Message for PeerNameContainer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.peer_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.peer_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.peer_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.peer_name.is_empty() {
            os.write_string(1, &self.peer_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PeerNameContainer {
        PeerNameContainer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "peer_name",
                    |m: &PeerNameContainer| { &m.peer_name },
                    |m: &mut PeerNameContainer| { &mut m.peer_name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PeerNameContainer>(
                    "PeerNameContainer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PeerNameContainer {
        static mut instance: ::protobuf::lazy::Lazy<PeerNameContainer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PeerNameContainer,
        };
        unsafe {
            instance.get(PeerNameContainer::new)
        }
    }
}

impl ::protobuf::Clear for PeerNameContainer {
    fn clear(&mut self) {
        self.clear_peer_name();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PeerNameContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PeerNameContainer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesRequest {
    // message fields
    pub term: u64,
    pub leader: ::std::vec::Vec<u8>,
    pub prev_log_entry: u64,
    pub prev_log_term: u64,
    pub entries: ::protobuf::RepeatedField<LogEntry>,
    pub leader_commit_index: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AppendEntriesRequest {
    pub fn new() -> AppendEntriesRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bytes leader = 2;

    pub fn clear_leader(&mut self) {
        self.leader.clear();
    }

    // Param is passed by value, moved
    pub fn set_leader(&mut self, v: ::std::vec::Vec<u8>) {
        self.leader = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.leader
    }

    // Take field
    pub fn take_leader(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.leader, ::std::vec::Vec::new())
    }

    pub fn get_leader(&self) -> &[u8] {
        &self.leader
    }

    // uint64 prev_log_entry = 3;

    pub fn clear_prev_log_entry(&mut self) {
        self.prev_log_entry = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_entry(&mut self, v: u64) {
        self.prev_log_entry = v;
    }

    pub fn get_prev_log_entry(&self) -> u64 {
        self.prev_log_entry
    }

    // uint64 prev_log_term = 4;

    pub fn clear_prev_log_term(&mut self) {
        self.prev_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_prev_log_term(&mut self, v: u64) {
        self.prev_log_term = v;
    }

    pub fn get_prev_log_term(&self) -> u64 {
        self.prev_log_term
    }

    // repeated .LogEntry entries = 5;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<LogEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<LogEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<LogEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[LogEntry] {
        &self.entries
    }

    // uint64 leader_commit_index = 6;

    pub fn clear_leader_commit_index(&mut self) {
        self.leader_commit_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_leader_commit_index(&mut self, v: u64) {
        self.leader_commit_index = v;
    }

    pub fn get_leader_commit_index(&self) -> u64 {
        self.leader_commit_index
    }
}

impl ::protobuf::Message for AppendEntriesRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.leader)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_log_entry = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.prev_log_term = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.leader_commit_index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leader.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.leader);
        }
        if self.prev_log_entry != 0 {
            my_size += ::protobuf::rt::value_size(3, self.prev_log_entry, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.prev_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.prev_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.leader_commit_index != 0 {
            my_size += ::protobuf::rt::value_size(6, self.leader_commit_index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if !self.leader.is_empty() {
            os.write_bytes(2, &self.leader)?;
        }
        if self.prev_log_entry != 0 {
            os.write_uint64(3, self.prev_log_entry)?;
        }
        if self.prev_log_term != 0 {
            os.write_uint64(4, self.prev_log_term)?;
        }
        for v in &self.entries {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.leader_commit_index != 0 {
            os.write_uint64(6, self.leader_commit_index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesRequest {
        AppendEntriesRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &AppendEntriesRequest| { &m.term },
                    |m: &mut AppendEntriesRequest| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "leader",
                    |m: &AppendEntriesRequest| { &m.leader },
                    |m: &mut AppendEntriesRequest| { &mut m.leader },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "prev_log_entry",
                    |m: &AppendEntriesRequest| { &m.prev_log_entry },
                    |m: &mut AppendEntriesRequest| { &mut m.prev_log_entry },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "prev_log_term",
                    |m: &AppendEntriesRequest| { &m.prev_log_term },
                    |m: &mut AppendEntriesRequest| { &mut m.prev_log_term },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LogEntry>>(
                    "entries",
                    |m: &AppendEntriesRequest| { &m.entries },
                    |m: &mut AppendEntriesRequest| { &mut m.entries },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "leader_commit_index",
                    |m: &AppendEntriesRequest| { &m.leader_commit_index },
                    |m: &mut AppendEntriesRequest| { &mut m.leader_commit_index },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppendEntriesRequest>(
                    "AppendEntriesRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendEntriesRequest {
        static mut instance: ::protobuf::lazy::Lazy<AppendEntriesRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppendEntriesRequest,
        };
        unsafe {
            instance.get(AppendEntriesRequest::new)
        }
    }
}

impl ::protobuf::Clear for AppendEntriesRequest {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_leader();
        self.clear_prev_log_entry();
        self.clear_prev_log_term();
        self.clear_entries();
        self.clear_leader_commit_index();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesResponse {
    // message fields
    pub term: u64,
    pub last_log: u64,
    pub success: bool,
    pub no_retry_backoff: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AppendEntriesResponse {
    pub fn new() -> AppendEntriesResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // uint64 last_log = 2;

    pub fn clear_last_log(&mut self) {
        self.last_log = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log(&mut self, v: u64) {
        self.last_log = v;
    }

    pub fn get_last_log(&self) -> u64 {
        self.last_log
    }

    // bool success = 3;

    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    pub fn get_success(&self) -> bool {
        self.success
    }

    // bool no_retry_backoff = 4;

    pub fn clear_no_retry_backoff(&mut self) {
        self.no_retry_backoff = false;
    }

    // Param is passed by value, moved
    pub fn set_no_retry_backoff(&mut self, v: bool) {
        self.no_retry_backoff = v;
    }

    pub fn get_no_retry_backoff(&self) -> bool {
        self.no_retry_backoff
    }
}

impl ::protobuf::Message for AppendEntriesResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_retry_backoff = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_log, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        if self.no_retry_backoff != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.last_log != 0 {
            os.write_uint64(2, self.last_log)?;
        }
        if self.success != false {
            os.write_bool(3, self.success)?;
        }
        if self.no_retry_backoff != false {
            os.write_bool(4, self.no_retry_backoff)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesResponse {
        AppendEntriesResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &AppendEntriesResponse| { &m.term },
                    |m: &mut AppendEntriesResponse| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_log",
                    |m: &AppendEntriesResponse| { &m.last_log },
                    |m: &mut AppendEntriesResponse| { &mut m.last_log },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &AppendEntriesResponse| { &m.success },
                    |m: &mut AppendEntriesResponse| { &mut m.success },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "no_retry_backoff",
                    |m: &AppendEntriesResponse| { &m.no_retry_backoff },
                    |m: &mut AppendEntriesResponse| { &mut m.no_retry_backoff },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppendEntriesResponse>(
                    "AppendEntriesResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendEntriesResponse {
        static mut instance: ::protobuf::lazy::Lazy<AppendEntriesResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppendEntriesResponse,
        };
        unsafe {
            instance.get(AppendEntriesResponse::new)
        }
    }
}

impl ::protobuf::Clear for AppendEntriesResponse {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_last_log();
        self.clear_success();
        self.clear_no_retry_backoff();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteRequest {
    // message fields
    pub term: u64,
    pub candidate: ::std::vec::Vec<u8>,
    pub last_log_index: u64,
    pub last_log_term: u64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RequestVoteRequest {
    pub fn new() -> RequestVoteRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bytes candidate = 2;

    pub fn clear_candidate(&mut self) {
        self.candidate.clear();
    }

    // Param is passed by value, moved
    pub fn set_candidate(&mut self, v: ::std::vec::Vec<u8>) {
        self.candidate = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_candidate(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.candidate
    }

    // Take field
    pub fn take_candidate(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.candidate, ::std::vec::Vec::new())
    }

    pub fn get_candidate(&self) -> &[u8] {
        &self.candidate
    }

    // uint64 last_log_index = 3;

    pub fn clear_last_log_index(&mut self) {
        self.last_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_index(&mut self, v: u64) {
        self.last_log_index = v;
    }

    pub fn get_last_log_index(&self) -> u64 {
        self.last_log_index
    }

    // uint64 last_log_term = 4;

    pub fn clear_last_log_term(&mut self) {
        self.last_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_term(&mut self, v: u64) {
        self.last_log_term = v;
    }

    pub fn get_last_log_term(&self) -> u64 {
        self.last_log_term
    }
}

impl ::protobuf::Message for RequestVoteRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.candidate)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_term = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.candidate.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.candidate);
        }
        if self.last_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if !self.candidate.is_empty() {
            os.write_bytes(2, &self.candidate)?;
        }
        if self.last_log_index != 0 {
            os.write_uint64(3, self.last_log_index)?;
        }
        if self.last_log_term != 0 {
            os.write_uint64(4, self.last_log_term)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteRequest {
        RequestVoteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &RequestVoteRequest| { &m.term },
                    |m: &mut RequestVoteRequest| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "candidate",
                    |m: &RequestVoteRequest| { &m.candidate },
                    |m: &mut RequestVoteRequest| { &mut m.candidate },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_log_index",
                    |m: &RequestVoteRequest| { &m.last_log_index },
                    |m: &mut RequestVoteRequest| { &mut m.last_log_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_log_term",
                    |m: &RequestVoteRequest| { &m.last_log_term },
                    |m: &mut RequestVoteRequest| { &mut m.last_log_term },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestVoteRequest>(
                    "RequestVoteRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RequestVoteRequest {
        static mut instance: ::protobuf::lazy::Lazy<RequestVoteRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestVoteRequest,
        };
        unsafe {
            instance.get(RequestVoteRequest::new)
        }
    }
}

impl ::protobuf::Clear for RequestVoteRequest {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_candidate();
        self.clear_last_log_index();
        self.clear_last_log_term();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestVoteResponse {
    // message fields
    pub term: u64,
    pub peers: ::std::vec::Vec<u8>,
    pub granted: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl RequestVoteResponse {
    pub fn new() -> RequestVoteResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bytes peers = 2;

    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::std::vec::Vec<u8>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peers(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peers, ::std::vec::Vec::new())
    }

    pub fn get_peers(&self) -> &[u8] {
        &self.peers
    }

    // bool granted = 3;

    pub fn clear_granted(&mut self) {
        self.granted = false;
    }

    // Param is passed by value, moved
    pub fn set_granted(&mut self, v: bool) {
        self.granted = v;
    }

    pub fn get_granted(&self) -> bool {
        self.granted
    }
}

impl ::protobuf::Message for RequestVoteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peers)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.granted = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.peers.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.peers);
        }
        if self.granted != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if !self.peers.is_empty() {
            os.write_bytes(2, &self.peers)?;
        }
        if self.granted != false {
            os.write_bool(3, self.granted)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestVoteResponse {
        RequestVoteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &RequestVoteResponse| { &m.term },
                    |m: &mut RequestVoteResponse| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "peers",
                    |m: &RequestVoteResponse| { &m.peers },
                    |m: &mut RequestVoteResponse| { &mut m.peers },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "granted",
                    |m: &RequestVoteResponse| { &m.granted },
                    |m: &mut RequestVoteResponse| { &mut m.granted },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RequestVoteResponse>(
                    "RequestVoteResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RequestVoteResponse {
        static mut instance: ::protobuf::lazy::Lazy<RequestVoteResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RequestVoteResponse,
        };
        unsafe {
            instance.get(RequestVoteResponse::new)
        }
    }
}

impl ::protobuf::Clear for RequestVoteResponse {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_peers();
        self.clear_granted();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestVoteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestVoteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotRequest {
    // message fields
    pub term: u64,
    pub leader: ::std::vec::Vec<u8>,
    pub last_log_index: u64,
    pub last_log_term: u64,
    pub peers: ::std::vec::Vec<u8>,
    pub snapshot: ::std::vec::Vec<u8>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl InstallSnapshotRequest {
    pub fn new() -> InstallSnapshotRequest {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bytes leader = 2;

    pub fn clear_leader(&mut self) {
        self.leader.clear();
    }

    // Param is passed by value, moved
    pub fn set_leader(&mut self, v: ::std::vec::Vec<u8>) {
        self.leader = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_leader(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.leader
    }

    // Take field
    pub fn take_leader(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.leader, ::std::vec::Vec::new())
    }

    pub fn get_leader(&self) -> &[u8] {
        &self.leader
    }

    // uint64 last_log_index = 3;

    pub fn clear_last_log_index(&mut self) {
        self.last_log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_index(&mut self, v: u64) {
        self.last_log_index = v;
    }

    pub fn get_last_log_index(&self) -> u64 {
        self.last_log_index
    }

    // uint64 last_log_term = 4;

    pub fn clear_last_log_term(&mut self) {
        self.last_log_term = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_log_term(&mut self, v: u64) {
        self.last_log_term = v;
    }

    pub fn get_last_log_term(&self) -> u64 {
        self.last_log_term
    }

    // bytes peers = 5;

    pub fn clear_peers(&mut self) {
        self.peers.clear();
    }

    // Param is passed by value, moved
    pub fn set_peers(&mut self, v: ::std::vec::Vec<u8>) {
        self.peers = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peers(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peers
    }

    // Take field
    pub fn take_peers(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peers, ::std::vec::Vec::new())
    }

    pub fn get_peers(&self) -> &[u8] {
        &self.peers
    }

    // bytes snapshot = 6;

    pub fn clear_snapshot(&mut self) {
        self.snapshot.clear();
    }

    // Param is passed by value, moved
    pub fn set_snapshot(&mut self, v: ::std::vec::Vec<u8>) {
        self.snapshot = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_snapshot(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.snapshot
    }

    // Take field
    pub fn take_snapshot(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.snapshot, ::std::vec::Vec::new())
    }

    pub fn get_snapshot(&self) -> &[u8] {
        &self.snapshot
    }
}

impl ::protobuf::Message for InstallSnapshotRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.leader)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_index = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_log_term = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peers)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.snapshot)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.leader.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.leader);
        }
        if self.last_log_index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_log_term != 0 {
            my_size += ::protobuf::rt::value_size(4, self.last_log_term, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.peers.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.peers);
        }
        if !self.snapshot.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.snapshot);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if !self.leader.is_empty() {
            os.write_bytes(2, &self.leader)?;
        }
        if self.last_log_index != 0 {
            os.write_uint64(3, self.last_log_index)?;
        }
        if self.last_log_term != 0 {
            os.write_uint64(4, self.last_log_term)?;
        }
        if !self.peers.is_empty() {
            os.write_bytes(5, &self.peers)?;
        }
        if !self.snapshot.is_empty() {
            os.write_bytes(6, &self.snapshot)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotRequest {
        InstallSnapshotRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &InstallSnapshotRequest| { &m.term },
                    |m: &mut InstallSnapshotRequest| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "leader",
                    |m: &InstallSnapshotRequest| { &m.leader },
                    |m: &mut InstallSnapshotRequest| { &mut m.leader },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_log_index",
                    |m: &InstallSnapshotRequest| { &m.last_log_index },
                    |m: &mut InstallSnapshotRequest| { &mut m.last_log_index },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "last_log_term",
                    |m: &InstallSnapshotRequest| { &m.last_log_term },
                    |m: &mut InstallSnapshotRequest| { &mut m.last_log_term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "peers",
                    |m: &InstallSnapshotRequest| { &m.peers },
                    |m: &mut InstallSnapshotRequest| { &mut m.peers },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "snapshot",
                    |m: &InstallSnapshotRequest| { &m.snapshot },
                    |m: &mut InstallSnapshotRequest| { &mut m.snapshot },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstallSnapshotRequest>(
                    "InstallSnapshotRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstallSnapshotRequest {
        static mut instance: ::protobuf::lazy::Lazy<InstallSnapshotRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstallSnapshotRequest,
        };
        unsafe {
            instance.get(InstallSnapshotRequest::new)
        }
    }
}

impl ::protobuf::Clear for InstallSnapshotRequest {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_leader();
        self.clear_last_log_index();
        self.clear_last_log_term();
        self.clear_peers();
        self.clear_snapshot();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InstallSnapshotResponse {
    // message fields
    pub term: u64,
    pub success: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl InstallSnapshotResponse {
    pub fn new() -> InstallSnapshotResponse {
        ::std::default::Default::default()
    }

    // uint64 term = 1;

    pub fn clear_term(&mut self) {
        self.term = 0;
    }

    // Param is passed by value, moved
    pub fn set_term(&mut self, v: u64) {
        self.term = v;
    }

    pub fn get_term(&self) -> u64 {
        self.term
    }

    // bool success = 2;

    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }

    pub fn get_success(&self) -> bool {
        self.success
    }
}

impl ::protobuf::Message for InstallSnapshotResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.term = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.term != 0 {
            my_size += ::protobuf::rt::value_size(1, self.term, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.term != 0 {
            os.write_uint64(1, self.term)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InstallSnapshotResponse {
        InstallSnapshotResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "term",
                    |m: &InstallSnapshotResponse| { &m.term },
                    |m: &mut InstallSnapshotResponse| { &mut m.term },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "success",
                    |m: &InstallSnapshotResponse| { &m.success },
                    |m: &mut InstallSnapshotResponse| { &mut m.success },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InstallSnapshotResponse>(
                    "InstallSnapshotResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InstallSnapshotResponse {
        static mut instance: ::protobuf::lazy::Lazy<InstallSnapshotResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InstallSnapshotResponse,
        };
        unsafe {
            instance.get(InstallSnapshotResponse::new)
        }
    }
}

impl ::protobuf::Clear for InstallSnapshotResponse {
    fn clear(&mut self) {
        self.clear_term();
        self.clear_success();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InstallSnapshotResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InstallSnapshotResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AppendEntriesPipelineResponse {
    // message fields
    pub error: ::std::string::String,
    pub response: ::protobuf::SingularPtrField<AppendEntriesResponse>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl AppendEntriesPipelineResponse {
    pub fn new() -> AppendEntriesPipelineResponse {
        ::std::default::Default::default()
    }

    // string error = 1;

    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }

    pub fn get_error(&self) -> &str {
        &self.error
    }

    // .AppendEntriesResponse response = 2;

    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: AppendEntriesResponse) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut AppendEntriesResponse {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> AppendEntriesResponse {
        self.response.take().unwrap_or_else(|| AppendEntriesResponse::new())
    }

    pub fn get_response(&self) -> &AppendEntriesResponse {
        self.response.as_ref().unwrap_or_else(|| AppendEntriesResponse::default_instance())
    }
}

impl ::protobuf::Message for AppendEntriesPipelineResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.error);
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.error.is_empty() {
            os.write_string(1, &self.error)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AppendEntriesPipelineResponse {
        AppendEntriesPipelineResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "error",
                    |m: &AppendEntriesPipelineResponse| { &m.error },
                    |m: &mut AppendEntriesPipelineResponse| { &mut m.error },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AppendEntriesResponse>>(
                    "response",
                    |m: &AppendEntriesPipelineResponse| { &m.response },
                    |m: &mut AppendEntriesPipelineResponse| { &mut m.response },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AppendEntriesPipelineResponse>(
                    "AppendEntriesPipelineResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AppendEntriesPipelineResponse {
        static mut instance: ::protobuf::lazy::Lazy<AppendEntriesPipelineResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AppendEntriesPipelineResponse,
        };
        unsafe {
            instance.get(AppendEntriesPipelineResponse::new)
        }
    }
}

impl ::protobuf::Clear for AppendEntriesPipelineResponse {
    fn clear(&mut self) {
        self.clear_error();
        self.clear_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AppendEntriesPipelineResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AppendEntriesPipelineResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LogEntryType {
    LOG_ENTRY_COMMAND = 0,
    LOG_ENTRY_NOOP = 1,
    LOG_ENTRY_ADD_PEER = 2,
    LOG_ENTRY_REMOVE_PEER = 3,
    LOG_ENTRY_BARRIER = 4,
}

impl ::protobuf::ProtobufEnum for LogEntryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LogEntryType> {
        match value {
            0 => ::std::option::Option::Some(LogEntryType::LOG_ENTRY_COMMAND),
            1 => ::std::option::Option::Some(LogEntryType::LOG_ENTRY_NOOP),
            2 => ::std::option::Option::Some(LogEntryType::LOG_ENTRY_ADD_PEER),
            3 => ::std::option::Option::Some(LogEntryType::LOG_ENTRY_REMOVE_PEER),
            4 => ::std::option::Option::Some(LogEntryType::LOG_ENTRY_BARRIER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LogEntryType] = &[
            LogEntryType::LOG_ENTRY_COMMAND,
            LogEntryType::LOG_ENTRY_NOOP,
            LogEntryType::LOG_ENTRY_ADD_PEER,
            LogEntryType::LOG_ENTRY_REMOVE_PEER,
            LogEntryType::LOG_ENTRY_BARRIER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("LogEntryType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for LogEntryType {
}

impl ::std::default::Default for LogEntryType {
    fn default() -> Self {
        LogEntryType::LOG_ENTRY_COMMAND
    }
}

impl ::protobuf::reflect::ProtobufValue for LogEntryType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13src/raft-grpc.proto\"k\n\x08LogEntry\x12\x14\n\x05index\x18\x01\
    \x20\x01(\x04R\x05index\x12\x12\n\x04term\x18\x02\x20\x01(\x04R\x04term\
    \x12!\n\x04type\x18\x03\x20\x01(\x0e2\r.LogEntryTypeR\x04type\x12\x12\n\
    \x04data\x18\x04\x20\x01(\x0cR\x04data\"0\n\x11PeerNameContainer\x12\x1b\
    \n\tpeer_name\x18\x01\x20\x01(\tR\x08peerName\"\xe1\x01\n\x14AppendEntri\
    esRequest\x12\x12\n\x04term\x18\x01\x20\x01(\x04R\x04term\x12\x16\n\x06l\
    eader\x18\x02\x20\x01(\x0cR\x06leader\x12$\n\x0eprev_log_entry\x18\x03\
    \x20\x01(\x04R\x0cprevLogEntry\x12\"\n\rprev_log_term\x18\x04\x20\x01(\
    \x04R\x0bprevLogTerm\x12#\n\x07entries\x18\x05\x20\x03(\x0b2\t.LogEntryR\
    \x07entries\x12.\n\x13leader_commit_index\x18\x06\x20\x01(\x04R\x11leade\
    rCommitIndex\"\x8a\x01\n\x15AppendEntriesResponse\x12\x12\n\x04term\x18\
    \x01\x20\x01(\x04R\x04term\x12\x19\n\x08last_log\x18\x02\x20\x01(\x04R\
    \x07lastLog\x12\x18\n\x07success\x18\x03\x20\x01(\x08R\x07success\x12(\n\
    \x10no_retry_backoff\x18\x04\x20\x01(\x08R\x0enoRetryBackoff\"\x90\x01\n\
    \x12RequestVoteRequest\x12\x12\n\x04term\x18\x01\x20\x01(\x04R\x04term\
    \x12\x1c\n\tcandidate\x18\x02\x20\x01(\x0cR\tcandidate\x12$\n\x0elast_lo\
    g_index\x18\x03\x20\x01(\x04R\x0clastLogIndex\x12\"\n\rlast_log_term\x18\
    \x04\x20\x01(\x04R\x0blastLogTerm\"Y\n\x13RequestVoteResponse\x12\x12\n\
    \x04term\x18\x01\x20\x01(\x04R\x04term\x12\x14\n\x05peers\x18\x02\x20\
    \x01(\x0cR\x05peers\x12\x18\n\x07granted\x18\x03\x20\x01(\x08R\x07grante\
    d\"\xc0\x01\n\x16InstallSnapshotRequest\x12\x12\n\x04term\x18\x01\x20\
    \x01(\x04R\x04term\x12\x16\n\x06leader\x18\x02\x20\x01(\x0cR\x06leader\
    \x12$\n\x0elast_log_index\x18\x03\x20\x01(\x04R\x0clastLogIndex\x12\"\n\
    \rlast_log_term\x18\x04\x20\x01(\x04R\x0blastLogTerm\x12\x14\n\x05peers\
    \x18\x05\x20\x01(\x0cR\x05peers\x12\x1a\n\x08snapshot\x18\x06\x20\x01(\
    \x0cR\x08snapshot\"G\n\x17InstallSnapshotResponse\x12\x12\n\x04term\x18\
    \x01\x20\x01(\x04R\x04term\x12\x18\n\x07success\x18\x02\x20\x01(\x08R\
    \x07success\"i\n\x1dAppendEntriesPipelineResponse\x12\x14\n\x05error\x18\
    \x01\x20\x01(\tR\x05error\x122\n\x08response\x18\x02\x20\x01(\x0b2\x16.A\
    ppendEntriesResponseR\x08response*\x83\x01\n\x0cLogEntryType\x12\x15\n\
    \x11LOG_ENTRY_COMMAND\x10\0\x12\x12\n\x0eLOG_ENTRY_NOOP\x10\x01\x12\x16\
    \n\x12LOG_ENTRY_ADD_PEER\x10\x02\x12\x19\n\x15LOG_ENTRY_REMOVE_PEER\x10\
    \x03\x12\x15\n\x11LOG_ENTRY_BARRIER\x10\x042\xa9\x02\n\x0bRaftService\
    \x12T\n\x15AppendEntriesPipeline\x12\x15.AppendEntriesRequest\x1a\x1e.Ap\
    pendEntriesPipelineResponse\"\0(\x010\x01\x12@\n\rAppendEntries\x12\x15.\
    AppendEntriesRequest\x1a\x16.AppendEntriesResponse\"\0\x12:\n\x0bRequest\
    Vote\x12\x13.RequestVoteRequest\x1a\x14.RequestVoteResponse\"\0\x12F\n\
    \x0fInstallSnapshot\x12\x17.InstallSnapshotRequest\x1a\x18.InstallSnapsh\
    otResponse\"\0J\xc9,\n\x06\x12\x04\x01\0{\x01\nS\n\x01\x0c\x12\x03\x01\0\
    \x12\x1aI\x20source\x20https://github.com/paralin/raft-grpc/blob/master/\
    raft-grpc.proto\n\n6\n\x02\x05\0\x12\x04\x04\0\n\x01\x1a*\x20LogEntryTyp\
    e\x20is\x20the\x20type\x20of\x20the\x20LogEntry\n\n\n\n\x03\x05\0\x01\
    \x12\x03\x04\x05\x11\n\x0b\n\x04\x05\0\x02\0\x12\x03\x05\x02\x18\n\x0c\n\
    \x05\x05\0\x02\0\x01\x12\x03\x05\x02\x13\n\x0c\n\x05\x05\0\x02\0\x02\x12\
    \x03\x05\x16\x17\n\x0b\n\x04\x05\0\x02\x01\x12\x03\x06\x02\x15\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\x06\x02\x10\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\x06\x13\x14\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x07\x02\x19\n\x0c\
    \n\x05\x05\0\x02\x02\x01\x12\x03\x07\x02\x14\n\x0c\n\x05\x05\0\x02\x02\
    \x02\x12\x03\x07\x17\x18\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x08\x02\x1c\n\
    \x0c\n\x05\x05\0\x02\x03\x01\x12\x03\x08\x02\x17\n\x0c\n\x05\x05\0\x02\
    \x03\x02\x12\x03\x08\x1a\x1b\n\x0b\n\x04\x05\0\x02\x04\x12\x03\t\x02\x18\
    \n\x0c\n\x05\x05\0\x02\x04\x01\x12\x03\t\x02\x13\n\x0c\n\x05\x05\0\x02\
    \x04\x02\x12\x03\t\x16\x17\n1\n\x02\x04\0\x12\x04\r\0\x16\x01\x1a%\x20Lo\
    gEntry\x20contains\x20a\x20raft\x20log\x20entry.\n\n\n\n\x03\x04\0\x01\
    \x12\x03\r\x08\x10\n6\n\x04\x04\0\x02\0\x12\x03\x0f\x02\x13\x1a)\x20Inde\
    x\x20holds\x20the\x20index\x20of\x20the\x20log\x20entry.\n\n\r\n\x05\x04\
    \0\x02\0\x04\x12\x04\x0f\x02\r\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\
    \x0f\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\t\x0e\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\x0f\x11\x12\n=\n\x04\x04\0\x02\x01\x12\x03\x11\
    \x02\x12\x1a0\x20Term\x20holds\x20the\x20election\x20term\x20of\x20the\
    \x20log\x20entry.\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x11\x02\x0f\x13\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x11\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x11\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x11\x10\
    \x11\n4\n\x04\x04\0\x02\x02\x12\x03\x13\x02\x18\x1a'\x20Type\x20holds\
    \x20the\x20type\x20of\x20the\x20log\x20entry.\n\n\r\n\x05\x04\0\x02\x02\
    \x04\x12\x04\x13\x02\x11\x12\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x13\
    \x02\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13\x0f\x13\n\x0c\n\x05\
    \x04\0\x02\x02\x03\x12\x03\x13\x16\x17\n=\n\x04\x04\0\x02\x03\x12\x03\
    \x15\x02\x11\x1a0\x20Data\x20holds\x20the\x20log\x20entry's\x20type-spec\
    ific\x20data.\n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x15\x02\x13\x18\n\
    \x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x15\x08\x0c\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x15\
    \x0f\x10\n=\n\x02\x04\x01\x12\x04\x19\0\x1c\x01\x1a1\x20PeerNameContaine\
    r\x20encodes\x20a\x20peer\x20name\x20to\x20bytes.\n\n\n\n\x03\x04\x01\
    \x01\x12\x03\x19\x08\x19\n:\n\x04\x04\x01\x02\0\x12\x03\x1b\x02\x17\x1a-\
    \x20PeerName\x20is\x20the\x20peer\x20name\x20in\x20the\x20container.\n\n\
    \r\n\x05\x04\x01\x02\0\x04\x12\x04\x1b\x02\x19\x1b\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x1b\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1b\
    \t\x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1b\x15\x16\nI\n\x02\x04\
    \x02\x12\x04\x1f\0,\x01\x1a=\x20AppendEntriesRequest\x20maps\x20to\x20th\
    e\x20raft\x20AppendEntriesRequest.\n\n\n\n\x03\x04\x02\x01\x12\x03\x1f\
    \x08\x1c\n1\n\x04\x04\x02\x02\0\x12\x03!\x02\x12\x1a$\x20Term\x20is\x20t\
    he\x20current\x20election\x20term.\n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    !\x02\x1f\x1e\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03!\x02\x08\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03!\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\
    \x10\x11\n/\n\x04\x04\x02\x02\x01\x12\x03#\x02\x13\x1a\"\x20Leader\x20is\
    \x20the\x20current\x20leader\x20id.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\
    \x04#\x02!\x12\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03#\x02\x07\n\x0c\n\
    \x05\x04\x02\x02\x01\x01\x12\x03#\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03#\x11\x12\n6\n\x04\x04\x02\x02\x02\x12\x03%\x02\x1c\x1a)\x20\
    PrevLogEntry\x20is\x20the\x20previous\x20log\x20entry.\n\n\r\n\x05\x04\
    \x02\x02\x02\x04\x12\x04%\x02#\x13\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\
    \x03%\x02\x08\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03%\t\x17\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03%\x1a\x1b\n4\n\x04\x04\x02\x02\x03\x12\x03'\
    \x02\x1b\x1a'\x20PrevLogTerm\x20is\x20the\x20previous\x20log\x20term.\n\
    \n\r\n\x05\x04\x02\x02\x03\x04\x12\x04'\x02%\x1c\n\x0c\n\x05\x04\x02\x02\
    \x03\x05\x12\x03'\x02\x08\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03'\t\x16\
    \n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03'\x19\x1a\n9\n\x04\x04\x02\x02\
    \x04\x12\x03)\x02\x20\x1a,\x20Entries\x20are\x20the\x20new\x20log\x20ent\
    ries\x20to\x20commit.\n\n\x0c\n\x05\x04\x02\x02\x04\x04\x12\x03)\x02\n\n\
    \x0c\n\x05\x04\x02\x02\x04\x06\x12\x03)\x0b\x13\n\x0c\n\x05\x04\x02\x02\
    \x04\x01\x12\x03)\x14\x1b\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03)\x1e\
    \x1f\nC\n\x04\x04\x02\x02\x05\x12\x03+\x02!\x1a6\x20LeaderCommitIndex\
    \x20is\x20the\x20commit\x20index\x20on\x20the\x20leader.\n\n\r\n\x05\x04\
    \x02\x02\x05\x04\x12\x04+\x02)\x20\n\x0c\n\x05\x04\x02\x02\x05\x05\x12\
    \x03+\x02\x08\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03+\t\x1c\n\x0c\n\x05\
    \x04\x02\x02\x05\x03\x12\x03+\x1f\x20\nQ\n\x02\x04\x03\x12\x04/\08\x01\
    \x1aE\x20AppendEntriesResponse\x20is\x20the\x20response\x20to\x20the\x20\
    appendentries\x20request.\n\n\n\n\x03\x04\x03\x01\x12\x03/\x08\x1d\nC\n\
    \x04\x04\x03\x02\0\x12\x031\x02\x12\x1a6\x20Term\x20is\x20the\x20newer\
    \x20term\x20if\x20the\x20leader\x20is\x20out\x20of\x20date.\n\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x041\x02/\x1f\n\x0c\n\x05\x04\x03\x02\0\x05\x12\
    \x031\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x031\t\r\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x031\x10\x11\nJ\n\x04\x04\x03\x02\x01\x12\x033\x02\
    \x16\x1a=\x20LastLog\x20is\x20a\x20hint\x20to\x20help\x20accelerate\x20r\
    ebuilding\x20slow\x20nodes.\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x043\x02\
    1\x12\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x033\x02\x08\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x033\t\x11\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x033\
    \x14\x15\nD\n\x04\x04\x03\x02\x02\x12\x035\x02\x13\x1a7\x20Success\x20wi\
    ll\x20be\x20false\x20if\x20we\x20have\x20a\x20conflicting\x20entry.\n\n\
    \r\n\x05\x04\x03\x02\x02\x04\x12\x045\x023\x16\n\x0c\n\x05\x04\x03\x02\
    \x02\x05\x12\x035\x02\x06\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x035\x07\
    \x0e\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x035\x11\x12\nR\n\x04\x04\x03\
    \x02\x03\x12\x037\x02\x1c\x1aE\x20NoRetryBackoff\x20indicates\x20we\x20d\
    on't\x20need\x20to\x20backoff\x20the\x20next\x20attempt.\n\n\r\n\x05\x04\
    \x03\x02\x03\x04\x12\x047\x025\x13\n\x0c\n\x05\x04\x03\x02\x03\x05\x12\
    \x037\x02\x06\n\x0c\n\x05\x04\x03\x02\x03\x01\x12\x037\x07\x17\n\x0c\n\
    \x05\x04\x03\x02\x03\x03\x12\x037\x1a\x1b\nq\n\x02\x04\x04\x12\x04;\0D\
    \x01\x1ae\x20RequestVoteRequest\x20is\x20the\x20command\x20used\x20by\
    \x20a\x20candidate\x20to\x20ask\x20a\x20Raft\x20peer\x20for\x20a\x20vote\
    \x20in\x20an\x20election.\n\n\n\n\x03\x04\x04\x01\x12\x03;\x08\x1a\n+\n\
    \x04\x04\x04\x02\0\x12\x03=\x02\x12\x1a\x1e\x20Term\x20is\x20the\x20new\
    \x20voting\x20term.\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04=\x02;\x1c\n\
    \x0c\n\x05\x04\x04\x02\0\x05\x12\x03=\x02\x08\n\x0c\n\x05\x04\x04\x02\0\
    \x01\x12\x03=\t\r\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03=\x10\x11\n,\n\
    \x04\x04\x04\x02\x01\x12\x03?\x02\x16\x1a\x1f\x20Candidate\x20is\x20the\
    \x20candidate\x20id\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04?\x02=\x12\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03?\x02\x07\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03?\x08\x11\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03?\x14\
    \x15\n2\n\x04\x04\x04\x02\x02\x12\x03A\x02\x1c\x1a%\x20LastLogIndex\x20i\
    s\x20the\x20last\x20log\x20index.\n\n\r\n\x05\x04\x04\x02\x02\x04\x12\
    \x04A\x02?\x16\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03A\x02\x08\n\x0c\n\
    \x05\x04\x04\x02\x02\x01\x12\x03A\t\x17\n\x0c\n\x05\x04\x04\x02\x02\x03\
    \x12\x03A\x1a\x1b\n0\n\x04\x04\x04\x02\x03\x12\x03C\x02\x1b\x1a#\x20Last\
    LogTerm\x20is\x20the\x20last\x20log\x20term.\n\n\r\n\x05\x04\x04\x02\x03\
    \x04\x12\x04C\x02A\x1c\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03C\x02\x08\
    \n\x0c\n\x05\x04\x04\x02\x03\x01\x12\x03C\t\x16\n\x0c\n\x05\x04\x04\x02\
    \x03\x03\x12\x03C\x19\x1a\nU\n\x02\x04\x05\x12\x04G\0N\x01\x1aI\x20Reque\
    stVoteResponse\x20is\x20the\x20response\x20returned\x20from\x20a\x20Requ\
    estVoteRequest.\n\n\n\n\x03\x04\x05\x01\x12\x03G\x08\x1b\nB\n\x04\x04\
    \x05\x02\0\x12\x03I\x02\x12\x1a5\x20Term\x20is\x20the\x20newer\x20term\
    \x20if\x20the\x20lader\x20is\x20out\x20of\x20date.\n\n\r\n\x05\x04\x05\
    \x02\0\x04\x12\x04I\x02G\x1d\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03I\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03I\t\r\n\x0c\n\x05\x04\x05\x02\
    \0\x03\x12\x03I\x10\x11\nW\n\x04\x04\x05\x02\x01\x12\x03K\x02\x12\x1aJ\
    \x20Peers\x20contains\x20the\x20current\x20peers\x20list\x20so\x20a\x20n\
    ode\x20can\x20shutdown\x20on\x20removal.\n\n\r\n\x05\x04\x05\x02\x01\x04\
    \x12\x04K\x02I\x12\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03K\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03K\x08\r\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03K\x10\x11\n/\n\x04\x04\x05\x02\x02\x12\x03M\x02\x13\x1a\
    \"\x20Granted\x20if\x20the\x20vote\x20was\x20granted.\n\n\r\n\x05\x04\
    \x05\x02\x02\x04\x12\x04M\x02K\x12\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\
    \x03M\x02\x06\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03M\x07\x0e\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03M\x11\x12\n\x92\x01\n\x02\x04\x06\x12\
    \x04Q\0^\x01\x1a\x85\x01\x20InstallSnapshotRequest\x20is\x20the\x20comma\
    nd\x20sent\x20to\x20a\x20Raft\x20peer\x20to\x20bootstrap\x20its\x20log\
    \x20(and\x20state\x20machine)\x20from\x20a\x20snapshot\x20on\x20another\
    \x20peer.\n\n\n\n\x03\x04\x06\x01\x12\x03Q\x08\x1e\n(\n\x04\x04\x06\x02\
    \0\x12\x03S\x02\x12\x1a\x1b\x20Term\x20is\x20the\x20current\x20term.\n\n\
    \r\n\x05\x04\x06\x02\0\x04\x12\x04S\x02Q\x20\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03S\t\r\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03S\x10\x11\n,\n\x04\x04\x06\x02\x01\x12\x03\
    U\x02\x13\x1a\x1f\x20Leader\x20is\x20the\x20current\x20leader.\n\n\r\n\
    \x05\x04\x06\x02\x01\x04\x12\x04U\x02S\x12\n\x0c\n\x05\x04\x06\x02\x01\
    \x05\x12\x03U\x02\x07\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03U\x08\x0e\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x03U\x11\x12\nK\n\x04\x04\x06\x02\x02\
    \x12\x03W\x02\x1c\x1a>\x20LastLogIndex\x20is\x20the\x20last\x20log\x20in\
    dex\x20included\x20in\x20the\x20snapshot.\n\n\r\n\x05\x04\x06\x02\x02\
    \x04\x12\x04W\x02U\x13\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03W\x02\x08\
    \n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03W\t\x17\n\x0c\n\x05\x04\x06\x02\
    \x02\x03\x12\x03W\x1a\x1b\nI\n\x04\x04\x06\x02\x03\x12\x03Y\x02\x1b\x1a<\
    \x20LastLogTerm\x20is\x20the\x20last\x20log\x20term\x20included\x20in\
    \x20the\x20snapshot.\n\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04Y\x02W\x1c\n\
    \x0c\n\x05\x04\x06\x02\x03\x05\x12\x03Y\x02\x08\n\x0c\n\x05\x04\x06\x02\
    \x03\x01\x12\x03Y\t\x16\n\x0c\n\x05\x04\x06\x02\x03\x03\x12\x03Y\x19\x1a\
    \n4\n\x04\x04\x06\x02\x04\x12\x03[\x02\x12\x1a'\x20Peers\x20is\x20the\
    \x20peer\x20set\x20in\x20the\x20snapshot\n\n\r\n\x05\x04\x06\x02\x04\x04\
    \x12\x04[\x02Y\x1b\n\x0c\n\x05\x04\x06\x02\x04\x05\x12\x03[\x02\x07\n\
    \x0c\n\x05\x04\x06\x02\x04\x01\x12\x03[\x08\r\n\x0c\n\x05\x04\x06\x02\
    \x04\x03\x12\x03[\x10\x11\n4\n\x04\x04\x06\x02\x05\x12\x03]\x02\x15\x1a'\
    \x20Snapshot\x20is\x20the\x20body\x20of\x20the\x20snapshot.\n\n\r\n\x05\
    \x04\x06\x02\x05\x04\x12\x04]\x02[\x12\n\x0c\n\x05\x04\x06\x02\x05\x05\
    \x12\x03]\x02\x07\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03]\x08\x10\n\x0c\
    \n\x05\x04\x06\x02\x05\x03\x12\x03]\x13\x14\nR\n\x02\x04\x07\x12\x04a\0f\
    \x01\x1aF\x20InstallSnapshotResponse\x20is\x20the\x20response\x20to\x20t\
    he\x20InstallSnapshot\x20call.\n\n\n\n\x03\x04\x07\x01\x12\x03a\x08\x1f\
    \n0\n\x04\x04\x07\x02\0\x12\x03c\x02\x12\x1a#\x20Term\x20is\x20the\x20te\
    rm\x20in\x20the\x20snapshot.\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04c\x02a\
    !\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03c\x02\x08\n\x0c\n\x05\x04\x07\x02\
    \0\x01\x12\x03c\t\r\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03c\x10\x11\nI\n\
    \x04\x04\x07\x02\x01\x12\x03e\x02\x13\x1a<\x20Success\x20indiciates\x20i\
    f\x20the\x20snapshot\x20was\x20installed\x20properly.\n\n\r\n\x05\x04\
    \x07\x02\x01\x04\x12\x04e\x02c\x12\n\x0c\n\x05\x04\x07\x02\x01\x05\x12\
    \x03e\x02\x06\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03e\x07\x0e\n\x0c\n\
    \x05\x04\x07\x02\x01\x03\x12\x03e\x11\x12\nd\n\x02\x04\x08\x12\x04i\0n\
    \x01\x1aX\x20AppendEntriesPipelineResponse\x20is\x20the\x20wrapper\x20of\
    \x20an\x20AmendEntriesResponse\x20in\x20a\x20pipeline.\n\n\n\n\x03\x04\
    \x08\x01\x12\x03i\x08%\n,\n\x04\x04\x08\x02\0\x12\x03k\x02\x13\x1a\x1f\
    \x20Error\x20is\x20any\x20potential\x20error.\n\n\r\n\x05\x04\x08\x02\0\
    \x04\x12\x04k\x02i'\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03k\x02\x08\n\x0c\
    \n\x05\x04\x08\x02\0\x01\x12\x03k\t\x0e\n\x0c\n\x05\x04\x08\x02\0\x03\
    \x12\x03k\x11\x12\n;\n\x04\x04\x08\x02\x01\x12\x03m\x02%\x1a.\x20Respons\
    e\x20is\x20the\x20response\x20object\x20if\x20necessary\n\n\r\n\x05\x04\
    \x08\x02\x01\x04\x12\x04m\x02k\x13\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\
    \x03m\x02\x17\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03m\x18\x20\n\x0c\n\
    \x05\x04\x08\x02\x01\x03\x12\x03m#$\nB\n\x02\x06\0\x12\x04r\0{\x01\x1a6\
    \x20RaftService\x20implements\x20the\x20raft\x20pipelining\x20receiver.\
    \n\n\n\n\x03\x06\0\x01\x12\x03r\x08\x13\nK\n\x04\x06\0\x02\0\x12\x03t\
    \x02j\x1a>\x20AppendEntriesPipeline\x20opens\x20an\x20AppendEntries\x20m\
    essage\x20stream.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03t\x06\x1b\n\x0c\n\
    \x05\x06\0\x02\0\x05\x12\x03t\x1c\"\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03t\
    #7\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03tBH\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03tIf\nQ\n\x04\x06\0\x02\x01\x12\x03v\x02L\x1aD\x20AppendEntries\
    \x20performs\x20a\x20single\x20append\x20entries\x20request\x20/\x20resp\
    onse.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03v\x06\x13\n\x0c\n\x05\x06\0\
    \x02\x01\x02\x12\x03v\x14(\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03v3H\nk\n\
    \x04\x06\0\x02\x02\x12\x03x\x02F\x1a^\x20RequestVote\x20is\x20the\x20com\
    mand\x20used\x20by\x20a\x20candidate\x20to\x20ask\x20a\x20Raft\x20peer\
    \x20for\x20a\x20vote\x20in\x20an\x20election.\n\n\x0c\n\x05\x06\0\x02\
    \x02\x01\x12\x03x\x06\x11\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03x\x12$\n\
    \x0c\n\x05\x06\0\x02\x02\x03\x12\x03x/B\n\x8b\x01\n\x04\x06\0\x02\x03\
    \x12\x03z\x02R\x1a~\x20InstallSnapshot\x20is\x20the\x20command\x20sent\
    \x20to\x20a\x20Raft\x20peer\x20to\x20bootstrap\x20its\x20log\x20(and\x20\
    state\x20machine)\x20from\x20a\x20snapshot\x20on\x20another\x20peer.\n\n\
    \x0c\n\x05\x06\0\x02\x03\x01\x12\x03z\x06\x15\n\x0c\n\x05\x06\0\x02\x03\
    \x02\x12\x03z\x16,\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03z7Nb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
